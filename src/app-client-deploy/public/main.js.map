{"version":3,"sources":["./src/environments/environment.ts","./src/app/services/websocket.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/models/message.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\r\nimport {webSocket, WebSocketSubject} from 'rxjs/webSocket';\r\nimport { EMPTY, Subject } from 'rxjs';\r\n\r\nconst WS_ENDPOINT =\r\n  'wss://acjjyzgsld.execute-api.ap-southeast-1.amazonaws.com/Prod';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WebsocketService {\r\n  public socket$: WebSocketSubject<any>;\r\n\r\n  public connect(): void {\r\n\tthis.socket$ = webSocket(WS_ENDPOINT);\r\n  }\r\n\r\n  sendMessage(msg: any) {\r\n    this.socket$.next(msg);\r\n  }\r\n\r\n  close() {\r\n    this.socket$.complete();\r\n  }\r\n}\r\n","import { Component, NgZone } from '@angular/core';\nimport { WebsocketService } from './services/websocket.service';\nimport { Message } from '../models/message';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [WebsocketService],\n})\nexport class AppComponent {\n  title = 'app-client';\n  txtMessage: string = '';\n  uniqueID: string = new Date().getTime().toString();\n  shortName: string = this.makeid(2);\n  messages = new Array<Message>();\n  message = new Message();\n  constructor(private ws: WebsocketService,\n    private _ngZone: NgZone  ) {\n    this.ws.connect();\n\n    this.ws.socket$.subscribe(\n      (msg) => this._ngZone.run(() => {\n        if (msg.clientUniqueId !== this.uniqueID) {  \n          msg.type = \"received\";  \n          this.messages.push(msg);  \n        }  \n      }),\n      // Called whenever there is a message from the server\n      (err) => console.log(err),\n      // Called if WebSocket API signals some kind of error\n      () => console.log('complete')\n      // Called when connection is closed (for whatever reason)\n    );\n  }\n\n  private makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result.toUpperCase();\n }\n \n\n  sendMessage() {\n    console.log('new message from client to websocket: ', this.txtMessage);\n    if (this.txtMessage) {  \n      this.message = new Message();  \n      this.message.clientUniqueId = this.uniqueID;  \n      this.message.senderShortName = this.shortName;\n      this.message.type = \"sent\";  \n      this.message.body = this.txtMessage;  \n      this.message.date = new Date();  \n      this.messages.push(this.message);  \n      var data = { message: 'sendmessage', data: JSON.stringify(this.message) };\n      this.ws.sendMessage(data);\n      this.txtMessage = '';\n    }  \n  }\n}\n","<div class=\"wrapper\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-12\">\n        <h3 class=\" text-center chat_header\">Your name: {{shortName}}</h3>\n        <h4 class=\" text-center chat_subheader\">Your Id: {{uniqueID}}</h4>\n      </div>\n      <div class=\"col-sm-12\">\n        <div class=\"messaging\">\n          <div class=\"inbox_msg\">\n            <div class=\"mesgs\">\n              <div class=\"msg_history\" #scrollMe [scrollTop]=\"scrollMe.scrollHeight\">\n                <div class=\"msg_item\" *ngFor=\"let msg of messages\">\n                  <div class=\"incoming_msg\" *ngIf=\"msg.type == 'received'\">\n                    <div class=\"incoming_msg_img\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{msg.senderName}}\">\n                      <span>\n                        {{msg.senderShortName}}\n                      </span>\n                    </div>\n                    <div class=\"received_msg\">\n                      <div class=\"received_withd_msg\">\n                        <p>\n                          {{msg.body}}\n                        </p>\n                        <span class=\"time_date\"> {{msg.date | date:'medium'}} </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"outgoing_msg\" *ngIf=\"msg.type == 'sent'\">\n                    <div class=\"sent_msg\">\n                      <p>\n                        {{msg.body}}\n                      </p>\n                      <span class=\"time_date\"> {{msg.date | date:'medium'}}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"type_msg\">\n                <div class=\"input_msg_write\">\n                  <input type=\"text\" class=\"write_msg\" [value]=\"txtMessage\" (input)=\"txtMessage=$event.target.value\"\n                    (keydown.enter)=\"sendMessage()\" placeholder=\"Type a message\" />\n                  <button class=\"msg_send_btn\" type=\"button\" (click)=\"sendMessage()\"><span class=\"material-icons\">\n                    send\n                    </span></button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Message {\r\n    clientUniqueId: string;\r\n    senderShortName: string;\r\n    senderName: string;\r\n    body: string;\r\n    type: string;\r\n    date: Date;\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}